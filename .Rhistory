test <- tail(points, 5)
test <- tail(points, 47)
View(test)
hospitals <- tail(points, 47)
centroids <- head(points, 1149)
View(centroids)
hospitals <- tail(points, 47)
centroids <- head(points, 1148)
# set inputs
mode <- "TRANSIT"
max_walk_dist <- 10000
max_trip_duration <- 60
departure_time<- as.POSIXct("29-04-2020 7:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = hospitals,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = TRUE)
points <- st_read("/Users/shivyucel/Documents/projects.nosync/Toronto_Health_Accessibility/data/centroids.csv")
points$lon <- as.numeric(as.character(points$lon))
points$lat <- as.numeric(as.character(points$lat))
hospitals <- tail(points, 47)
centroids <- head(points, 1148)
# set inputs
mode <- "TRANSIT"
max_walk_dist <- 10000
max_trip_duration <- 60
departure_time<- as.POSIXct("29-04-2020 7:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = hospitals,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = TRUE)
ttm
ttm_transit <- ttm
# set inputs
mode <- "WALK"
max_walk_dist <- 10000
max_trip_duration <- 60
departure_time<- as.POSIXct("29-04-2020 7:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = hospitals,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = TRUE)
ttm
ttm_transit
# set inputs
mode <- "TRANSIT"
max_walk_dist <- 10000
max_trip_duration <- 60
departure_time<- as.POSIXct("10-05-2020 12:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = hospitals,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = TRUE)
ttm
ttm_transit
ttm_transit <- ttm
ttm_transit
# set inputs
mode <- "WALK"
max_walk_dist <- 10000
max_trip_duration <- 60
departure_time<- as.POSIXct("10-05-2020 12:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = hospitals,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = TRUE)
ttm
# set inputs
mode <- "TRANSIT"
max_walk_dist <- 10000
max_trip_duration <- 60
departure_time<- as.POSIXct("10-05-2020 12:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = hospitals,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = TRUE)
ttm
# set inputs
mode <- "TRANSIT"
max_walk_dist <- 10000
max_trip_duration <- 60
departure_time<- as.POSIXct("10-05-2020 12:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = hospitals,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = TRUE)
ttm
ttm
# set inputs
mode <- "WALK"
max_walk_dist <- 10000
max_trip_duration <- 60
departure_time<- as.POSIXct("10-05-2020 12:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = hospitals,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = FALSE)
ttm
# set inputs
mode <- "TRANSIT"
max_walk_dist <- 10000
max_trip_duration <- 60
departure_time<- as.POSIXct("10-05-2020 12:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = hospitals,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = FALSE)
ttm
cens = st_write(ttm, "/Users/shivyucel/Documents/projects.nosync/Toronto_Health_Accessibility/data/2020_traveltimes.csv")
library(r5r)
library(sf)
library(r5r)
library(sf)
library(data.table)
library(ggplot2)
options(java.parameters = "-Xmx2G")
#OSM from BBBike
#GTFS from transitfeeds.com
r5r_core <- setup_r5(data_path =  '/Users/shivyucel/Documents/projects.nosync/Toronto_Health_Accessibility/data/r5r_core_2019', verbose = TRUE)
points <- st_read("/Users/shivyucel/Documents/projects.nosync/Toronto_Health_Accessibility/data/centroids.csv")
points$lon <- as.numeric(as.character(points$lon))
points$lat <- as.numeric(as.character(points$lat))
hospitals <- tail(points, 47)
centroids <- head(points, 1148)
# set inputs
mode <- "WALK"
max_walk_dist <- 10000
max_trip_duration <- 60
departure_time<- as.POSIXct("12-05-2019 12:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = hospitals,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = FALSE)
ttm
ttm
# set inputs
mode <- "TRANSIT"
max_walk_dist <- 10000
max_trip_duration <- 60
departure_time<- as.POSIXct("12-05-2019 12:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = hospitals,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = FALSE)
ttm
cens = st_write(ttm, "/Users/shivyucel/Documents/projects.nosync/Toronto_Health_Accessibility/data/2019_traveltimes.csv")
library(r5r)
library(sf)
library(r5r)
library(sf)
library(data.table)
library(ggplot2)
options(java.parameters = "-Xmx2G")
#OSM from BBBike
#GTFS from transitfeeds.com
r5r_core <- setup_r5(data_path =  '/Users/shivyucel/Documents/projects.nosync/Toronto_Health_Accessibility/data/r5r_core_2019', verbose = TRUE)
points <- st_read("/Users/shivyucel/Documents/projects.nosync/Toronto_Health_Accessibility/data/centroids.csv")
points$lon <- as.numeric(as.character(points$lon))
points$lat <- as.numeric(as.character(points$lat))
hospitals <- tail(points, 47)
centroids <- head(points, 1148)
# set inputs
mode <- "TRANSIT"
max_walk_dist <- 10000
max_trip_duration <- 60
departure_time<- as.POSIXct("13-05-2019 12:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = hospitals,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = FALSE)
ttm
ttm
# set inputs
mode <- "WALK"
max_walk_dist <- 10000
max_trip_duration <- 60
departure_time<- as.POSIXct("13-05-2019 12:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = hospitals,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = FALSE)
ttm
# set inputs
mode <- "TRANSIT"
max_walk_dist <- 10000
max_trip_duration <- 60
departure_time<- as.POSIXct("13-05-2019 12:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = hospitals,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = FALSE)
ttm
cens = st_write(ttm, "/Users/shivyucel/Documents/projects.nosync/Toronto_Health_Accessibility/data/13052019_traveltimes.csv")
library(r5r)
library(sf)
library(r5r)
library(sf)
library(data.table)
library(ggplot2)
options(java.parameters = "-Xmx2G")
#OSM from BBBike
#GTFS from transitfeeds.com
r5r_core <- setup_r5(data_path =  '/Users/shivyucel/Documents/projects.nosync/Toronto_Health_Accessibility/data/r5r_core_2020', verbose = TRUE)
points <- st_read("/Users/shivyucel/Documents/projects.nosync/Toronto_Health_Accessibility/data/centroids.csv")
points$lon <- as.numeric(as.character(points$lon))
points$lat <- as.numeric(as.character(points$lat))
hospitals <- tail(points, 47)
centroids <- head(points, 1148)
# set inputs
mode <- "WALK"
max_walk_dist <- 10000
max_trip_duration <- 60
departure_time<- as.POSIXct("11-05-2020 12:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = hospitals,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = FALSE)
ttm
# set inputs
mode <- "TRANSIT"
max_walk_dist <- 10000
max_trip_duration <- 60
departure_time<- as.POSIXct("11-05-2020 12:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = hospitals,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = FALSE)
ttm
cens = st_write(ttm, "/Users/shivyucel/Documents/projects.nosync/Toronto_Health_Accessibility/data/11052020_traveltimes.csv")
ttm
# set inputs
mode <- "WALK"
max_walk_dist <- 10000
max_trip_duration <- 60
departure_time<- as.POSIXct("11-05-2020 12:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = centroids,
destinations = hospitals,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = FALSE)
ttm
library(r5r)
library(sf)
library(r5r)
library(sf)
library(data.table)
library(ggplot2)
options(java.parameters = "-Xmx2G")
#OSM from BBBike
#GTFS from transitfeeds.com
r5r_core <- setup_r5(data_path =  '/Users/shivyucel/Documents/projects.nosync/R Learning/Transport_Analyses/data/r5r_core/r5r_core', verbose = TRUE)
points <- st_read("/Users/shivyucel/Documents/projects.nosync/R Learning/Transport_Analyses/data/toronto_centroids/toronto_centroids.shp")
drive
# set inputs
mode <- "TRANSIT"
max_walk_dist <- 10000
max_trip_duration <- 10000
departure_time<- as.POSIXct("12-10-2020 17:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = tail(points, 1),
destinations = points,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = TRUE)
ttm
# set inputs
mode <- "WALK"
max_walk_dist <- 10000
max_trip_duration <- 10000
departure_time<- as.POSIXct("12-10-2020 17:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = tail(points, 1),
destinations = points,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = TRUE)
ttm
# set inputs
mode <- c("WALK", "TRANSIT")
max_walk_dist <- 10000
max_trip_duration <- 10000
departure_time<- as.POSIXct("12-10-2020 17:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = tail(points, 1),
destinations = points,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = TRUE)
ttm
ttm
# set inputs
mode <- "TRANSIT"
max_walk_dist <- 10000
max_trip_duration <- 10000
departure_time<- as.POSIXct("12-10-2020 17:00:00", format = "%d-%m-%Y %H:%M:%S")
# calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = tail(points, 1),
destinations = points,
departure_datetime = departure_time,
mode = mode,
max_rides = 10,
max_walk_dist = 10000,
verbose = TRUE)
ttm
library(tidyverse)
library(sf)
hex_geom <- st_read("/Users/shivyucel/Documents/SDS_2021.nosync/SDS_2020-2021/SDS_Thesis/Data/paper_data/hex_geom_shp/hex_geom.shp", quiet=TRUE)
hex_geom
ggplot(data=hex_geom) +
geom_sf(aes(fill = pop)) +
scale_fill_viridis_c(option = "D", trans = 'reverse') +
theme_minimal()
ggplot(data=hex_geom) +
geom_sf(aes(fill = pop)) +
scale_fill_viridis_c(option = "D", trans = 'reverse') +
theme_minimal() +
scale_color_npg()
library("ggsci")
install.packages("ggsci")
library("ggsci")
hex_geom <- st_read("/Users/shivyucel/Documents/SDS_2021.nosync/SDS_2020-2021/SDS_Thesis/Data/paper_data/hex_geom_shp/hex_geom.shp", quiet=TRUE)
library("ggsci")
hex_geom <- st_read("/Users/shivyucel/Documents/SDS_2021.nosync/SDS_2020-2021/SDS_Thesis/Data/paper_data/hex_geom_shp/hex_geom.shp", quiet=TRUE)
ggplot(data=hex_geom) +
geom_sf(aes(fill = pop)) +
scale_fill_viridis_c(option = "D", trans = 'reverse') +
theme_minimal() +
scale_color_npg()
ggplot(data=hex_geom) +
geom_sf(aes(fill = pop)) +
theme_minimal() +
scale_color_npg()
ggplot(data=hex_geom) +
geom_sf(aes(fill = pop)) +
theme_minimal() +
scale_color_aaas()
ggplot(data=hex_geom) +
geom_sf(aes(fill = pop)) +
theme_minimal() +
scale_color_nejm()
ggplot(data=hex_geom) +
geom_sf(aes(fill = pop)) +
theme_minimal() +
scale_fill_gsea()
ggplot(data=hex_geom) +
geom_sf(aes(fill = pop)) +
theme_minimal() +
scale_fill_npg()
ggplot(data=hex_geom) +
geom_sf(aes(fill = pop)) +
theme_minimal() +
scale_color_igv()
ggplot(data=hex_geom) +
geom_sf(aes(fill = pop)) +
theme_minimal() +
scale_color_npg("red")
ggplot(data=hex_geom) +
geom_sf(aes(fill = pop)) +
theme_minimal() +
scale_fill_gsea(reverse = TRUE)
ggplot(data=hex_geom) +
geom_sf(aes(fill = pop)) +
theme_minimal() +
scale_fill_gsea()
ggplot(data=hex_geom) +
geom_sf(aes(fill = pop, label='Population')) +
theme_minimal() +
scale_fill_gsea()
ph_basemap <- get_map(location=c(lon = -75.16522, lat = 39.95258), zoom=11, maptype = 'terrain-background', source = 'stamen')
library(ggmap)
install.packages("ggmap")
library(ggmap)
ph_basemap <- get_map(location=c(lon = -75.16522, lat = 39.95258), zoom=11, maptype = 'terrain-background', source = 'stamen')
?register_google
register_google(key="AIzaSyDPgoPBl8r1Zfie-xOm_tgQT3SgKDvj-4Y")
ph_basemap <- get_map(location=c(lon = -75.16522, lat = 39.95258), zoom=11, maptype = 'terrain-background', source = 'stamen')
?get_map
(map <- get_map(c(-97.14667, 31.5493)))
(map <- get_map(maptype = "roadmap"))
install.packages("ggmap")
library("ggsci")
hex_geom <- st_read("/Users/shivyucel/Documents/SDS_2021.nosync/SDS_2020-2021/SDS_Thesis/Data/paper_data/hex_geom_shp/hex_geom.shp", quiet=TRUE)
library(tidyverse)
library(sf)
library("ggsci")
hex_geom <- st_read("/Users/shivyucel/Documents/SDS_2021.nosync/SDS_2020-2021/SDS_Thesis/Data/paper_data/hex_geom_shp/hex_geom.shp", quiet=TRUE)
library(ggmap)
register_google(key="AIzaSyDPgoPBl8r1Zfie-xOm_tgQT3SgKDvj-4Y")
(map <- get_map(maptype = "roadmap"))
register_google(key="AIzaSyDPgoPBl8r1Zfie-xOm_tgQT3SgKDvj-4Y")
register_google(key="AIzaSyDPgoPBl8r1Zfie-xOm_tgQT3SgKDvj-4Y")
```{r}
ph_basemap <- get_map(location=c(lon = -75.16522, lat = 39.95258), zoom=11, maptype = 'terrain-background', source = 'stamen')
library(tidyverse)
library(cancensus)
library(sp)
library(raster)
library(rgdal)
library(GISTools)
library(rgdal)
set_api_key('CensusMapper_a59bd92664838827e0a0f561a560600f', install = TRUE, overwrite = TRUE)
options(cancensus.cache_path = "/Users/shivyucel/Documents/projects.nosync/R Learning/Transport_Analyses/cache")
toronto_DA <- get_census(dataset='CA16', regions=list(CMA="35535"),
level='DA', use_cache = FALSE, geo_format = 'sf', quiet = TRUE)
vancouver_DA <- get_census(dataset='CA16', regions=list(CMA="59933"),
level='DA', use_cache = FALSE, geo_format = 'sf', quiet = TRUE)
library(tidyverse)
library(cancensus)
library(sp)
library(raster)
library(rgdal)
library(GISTools)
library(rgdal)
library(sf)
set_api_key('CensusMapper_a59bd92664838827e0a0f561a560600f', install = TRUE, overwrite = TRUE)
options(cancensus.cache_path = "/Users/shivyucel/Documents/projects.nosync/R Learning/Transport_Analyses/cache")
st_write(toronto_DA, "/Users/shivyucel/Documents/projects.nosync/Toronto_Health_Accessibility/Toronto_Health_Accessibility/project_dir/data/toronto_data/DA_shp.shp")
st_write(vancouver_DA, "/Users/shivyucel/Documents/projects.nosync/Toronto_Health_Accessibility/Toronto_Health_Accessibility/project_dir/data/vancouver_data/DA_shp.shp")
